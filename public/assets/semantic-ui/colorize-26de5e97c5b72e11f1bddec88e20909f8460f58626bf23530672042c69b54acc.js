/*!
 * # Semantic UI - Colorize
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
!function(e,t,i,n){"use strict";e.fn.colorize=function(t){var i=e.isPlainObject(t)?e.extend(!0,{},e.fn.colorize.settings,t):e.extend({},e.fn.colorize.settings),a=arguments||!1;return e(this).each(function(t){var o,r,s,l,c,u,d,h,p=e(this),m=e("<canvas />")[0],f=e("<canvas />")[0],g=e("<canvas />")[0],v=new Image,b=i.colors,y=(i.paths,i.namespace),T=i.error,k=p.data("module-"+y);return h={checkPreconditions:function(){return h.debug("Checking pre-conditions"),!e.isPlainObject(b)||e.isEmptyObject(b)?(h.error(T.undefinedColors),!1):!0},async:function(e){i.async?setTimeout(e,0):e()},getMetadata:function(){h.debug("Grabbing metadata"),l=p.data("image")||i.image||n,c=p.data("name")||i.name||t,u=i.width||p.width(),d=i.height||p.height(),(0===u||0===d)&&h.error(T.undefinedSize)},initialize:function(){h.debug("Initializing with colors",b),h.checkPreconditions()&&h.async(function(){h.getMetadata(),h.canvas.create(),h.draw.image(function(){h.draw.colors(),h.canvas.merge()}),p.data("module-"+y,h)})},redraw:function(){h.debug("Redrawing image"),h.async(function(){h.canvas.clear(),h.draw.colors(),h.canvas.merge()})},change:{color:function(e,t){return h.debug("Changing color",e),b[e]===n?(h.error(T.missingColor),!1):(b[e]=t,void h.redraw())}},canvas:{create:function(){h.debug("Creating canvases"),m.width=u,m.height=d,f.width=u,f.height=d,g.width=u,g.height=d,o=m.getContext("2d"),r=f.getContext("2d"),s=g.getContext("2d"),p.append(m),o=p.children("canvas")[0].getContext("2d")},clear:function(e){h.debug("Clearing canvas"),s.fillStyle="#FFFFFF",s.fillRect(0,0,u,d)},merge:function(){return e.isFunction(o.blendOnto)?(o.putImageData(r.getImageData(0,0,u,d),0,0),void s.blendOnto(o,"multiply")):void h.error(T.missingPlugin)}},draw:{image:function(e){h.debug("Drawing image"),e=e||function(){},l?(v.src=l,v.onload=function(){r.drawImage(v,0,0),e()}):(h.error(T.noImage),e())},colors:function(){h.debug("Drawing color overlays",b),e.each(b,function(e,t){i.onDraw(s,c,e,t)})}},debug:function(e,t){i.debug&&(t!==n?console.info(i.name+": "+e,t):console.info(i.name+": "+e))},error:function(e){console.warn(i.name+": "+e)},invoke:function(t,a,o){var r;return o=o||Array.prototype.slice.call(arguments,2),"string"==typeof t&&k!==n&&(t=t.split("."),e.each(t,function(t,n){return e.isPlainObject(k[n])?(k=k[n],!0):e.isFunction(k[n])?(r=k[n],!0):(h.error(i.error.method),!1)})),e.isFunction(r)?r.apply(a,o):!1}},k!==n&&a?("invoke"==a[0]&&(a=Array.prototype.slice.call(a,1)),h.invoke(a[0],this,Array.prototype.slice.call(a,1))):void h.initialize()}),this},e.fn.colorize.settings={name:"Image Colorizer",debug:!0,namespace:"colorize",onDraw:function(e,t,i,n){},async:!0,colors:{},metadata:{image:"image",name:"name"},error:{noImage:"No tracing image specified",undefinedColors:"No default colors specified.",missingColor:"Attempted to change color that does not exist",missingPlugin:"Blend onto plug-in must be included",undefinedHeight:"The width or height of image canvas could not be automatically determined. Please specify a height."}}}(jQuery,window,document);